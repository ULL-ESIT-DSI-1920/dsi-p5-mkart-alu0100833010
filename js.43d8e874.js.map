{"version":3,"sources":["js/KartPlayer.js","js/index.js"],"names":["KartPlayer","HTMLElement","name","config","attachShadow","mode","image","y","x","shadowRoot","innerHTML","styles","setSpeed","render","Math","floor","random","road","appendChild","customElements","define","FPS","startButton","document","querySelector","restartButton","karts","timer","Object","entries","players","length","kart","addToRoad","push","startRace","setInterval","startIteration","disabled","endRace","clearInterval","forEach","isWinner","win","lose","restartRace","restart","inc","some","onclick"],"mappings":"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","file":"js.43d8e874.js","sourceRoot":"../src","sourcesContent":["// Datos:   Condición de final de carrera: x >= 950\n//          Utilizar ShadowDOM\n//          Añadir métodos: .inc() incrementa la cantidad a la que avanza el kart\n//                          .setSpeed() velocidad que toma el kart \n//                          .win() y .lose() que establece un kart ganador o perdedor\n//                          .isWinner() comprueba si un kart es ganador x >= 950\n//                          .addToRoad() añade los personajes a la carretera\n//                          .restart() reiniciar la carrera\n\nexport class KartPlayer extends HTMLElement {\n    // Constructor\n    constructor (name, config) {\n        super();                                // Llamamos a la clase padre (HTMLElement)\n        this.attachShadow({mode: 'open'});      // Creamos el ShadowDOM\n        this.name = name;                       // Nombre del personaje\n        this.image = config.image;              // Imagen del personaje\n        this.y = config.y;                      // Posición y del personaje\n        this.x = 0;                             // Posición x del personaje, comienza en 0.\n    }\n\n    get styles() {\n        return ` \n            :host {\n                position: absolute;\n                display: inline-block;\n                left: ${this.x}px;\n                top: ${this.y}px;\n                transform: translateX(var(--x)) translateY(var(--y));\n                transition: transform 0.25s;\n                will-change: transformM\n            }\n            .winner {\n                filter: drop-shadow(0 0 6px yellow);\n                z-index: 5;\n            }\n            .loser {\n                opacity: 0.25;\n            }\n    `;\n    }\n\n    render() {                                  // Trabajamos sobre el ShadowDOM\n        this.shadowRoot.innerHTML = `           \n        <style>${this.styles}</style>\n        <item-kart></item-kart>\n        <img src=\"${this.image}\" alt=\"${this.name}\">\n        `;\n    }\n\n    inc() {                                     // Incrementa la cantidad que avanza el kart (eje x)\n        this.x += 1;\n        this.setSpeed();\n        this.render();\n    }\n\n    setSpeed() {                                          // Variamos la velocidad a la que avanza cada kart (eje x)\n        this.x += Math.floor(Math.random() * 5) + 2;      // Incrementa la velodad un numero aleatorio entre 5 y 2\n    }\n\n    win() {\n        this.shadowRoot.innerHTML = `           \n        <style>${this.styles}</style>\n        <item-kart></item-kart>\n        <img class=\"winner\" src=\"${this.image}\" alt=\"${this.name}\">\n        `;\n    }\n\n    lose() {\n        this.shadowRoot.innerHTML = `           \n        <style>${this.styles}</style>\n        <item-kart></item-kart>\n        <img class=\"loser\" src=\"${this.image}\" alt=\"${this.name}\">\n        `;\n    }\n\n    isWinner() {\n        if (this.x >= 950)\n            return true;\n        else\n            return false;\n    }\n\n    addToRoad(road) {\n        road.appendChild(this);\n        this.render();\n    }\n\n    restart() {\n        this.x = 0;\n        this.render();\n    }\n}\n\ncustomElements.define('kart-player', KartPlayer);  // Activamos y definimos la etiqueta asociada a la clase","import players from \"../assets/kart-*.png\";\nimport { KartPlayer } from \"./KartPlayer\";\n\nconst FPS = 1000 / 60;\nconst startButton = document.querySelector(\".start\");\nconst restartButton = document.querySelector(\".restart\");\nconst road = document.querySelector(\".road\");\nconst karts = [];\nlet timer = null;\n\nfor (const [name, image] of Object.entries(players)) {  // name: guardamos la key (*), image: imagen del player\n    const config = {\n        image,                  // Imagen del player\n        y: karts.length * 64    // Crea una coordenada y donde va a ir posicionado el personaje\n    };\n    const kart = new KartPlayer(name, config);          // Equivalente: const kart = document.createElement(\"kart-player\");\n    kart.addToRoad(road);       // Método para añadir los karts a la carretera\n    karts.push(kart);           // Array de los componentes\n}\n\n// Enfoque funcional\n\nconst startRace = () => {\n    timer = setInterval(() => startIteration(), FPS);   // Ejecuta cada x tiempo (60 fps) la función startIteration()\n    startButton.disabled = true;        // Desactivamos el botón\n    restartButton.disabled = true;      // Desactivamos el botón\n};\n\nconst endRace = () => {\n    clearInterval(timer);       // Limpiamos el timer del intervalo, no se llama más a startIteration\n    karts.forEach(kart => (kart.isWinner() ? kart.win() : kart.lose()));    // Si el kart es ganador, llama al método win(), si no, lose()\n    restartButton.disabled = false;     // Reactivmos el botón\n}   // Método win() y lose(): De forma visual se represena que kart es el ganador y quien es el perdedor.\n/* .win()                                       .lose()\nfilter: drop-shadow(0 0 6px yellow)             opacity: 0.25;\nz-index: 5;\n*/\nconst restartRace = () => {            // Por cada kart reinicias la carrera\n    karts.forEach(kart => (kart.restart()));\n    startButton.disabled = false;       // Reactivmos el botón\n}\n\nconst startIteration = () => {                  // Cuanto avanza cada personaje\n    karts.forEach(kart => kart.inc());          // Por cada kart, se ejecutar kart.inc(), que hace que avance el kart x pasos\n    if (karts.some(kart => kart.isWinner())) endRace(); // Comprobar si algún kart es el ganador y llamamos a endRace\n};  // Método isWinner() devuelve true o false, comprobar el eje x para saber si ha llegado al final\n\nstartButton.onclick = () => startRace();\nrestartButton.onclick = () => restartRace();"]}